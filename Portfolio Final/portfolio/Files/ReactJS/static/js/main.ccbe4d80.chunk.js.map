{"version":3,"sources":["stores/userStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","succes","userStore","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccbe4d80.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/** \r\n * UserStore\r\n*/\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this, {\r\n\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"inputField\">\r\n            \r\n            <input \r\n              className='input'\r\n              type={this.props.type}\r\n              placeholder={this.props.placeholder}\r\n              value={this.props.value}\r\n              onChange={(e) => this.props.onChange(e.target.value)}\r\n            />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"submitButton\">\r\n            \r\n        <button\r\n          className='btn'\r\n          disabled={this.props.disabled}\r\n          onClick={ () => this.props.onClick() }\r\n        >\r\n\r\n          {this.props.text}\r\n\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React          from 'react';\r\nimport UserStore      from './stores/userStore'\r\nimport InputField     from './InputField'\r\nimport SubmitButton   from './SubmitButton'\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      username:'',\r\n      password:'',\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  //Input van username en wachtwoord\r\n  setInputValue(property, val){\r\n    val = val.trim();\r\n    if (val.length > 12){\r\n      return\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  //Reset de form als iets incorrect is\r\n  resetForm(){\r\n    this.setState({\r\n      username:'',\r\n      password:'',\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n\r\n  async doLogin(){\r\n\r\n    if(!this.state.username){\r\n      return\r\n    }\r\n    if(!this.state.password){\r\n      return\r\n    }\r\n\r\n    this.setState({\r\n      buttonDisabled: true\r\n    })\r\n\r\n    try {\r\n      let res = await fetch('/login',{\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      })\r\n\r\n      let result = await res.json();\r\n      if(result && result.success){\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      }\r\n      else if(result && result.success === false){\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n    }\r\n\r\n    catch(e){\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"loginForm\">\r\n        Log incorrect  \r\n        <InputField\r\n          type='text'\r\n          placeholder='Username'\r\n          value={this.state.username ? this.state.username: ''}\r\n          onChange={(val) => this.setInputValue('username', val)}\r\n        />\r\n\r\n        <InputField\r\n          type='password'\r\n          placeholder='Password'\r\n          value={this.state.password ? this.state.password: ''}\r\n          onChange={(val) => this.setInputValue('password', val)}\r\n        />\r\n\r\n        <SubmitButton\r\n          text='Login'\r\n          disabled = {this.state.buttonDisabled}\r\n          onClick={ () => this.doLogin()}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React        from 'react'\nimport {observer}   from 'mobx-react'\nimport UserStore    from './stores/userStore'\nimport userStore    from './stores/userStore'\nimport LoginForm    from './LoginForm'\nimport SubmitButton from './SubmitButton'\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  async componentDidMount(){\n\n    try{\n      //kijkt of de gebruiker ingelogt is of niet\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json()\n\n      if(result && result.succes){\n        UserStore.loading = false\n        UserStore.isLoggedIn = true\n        UserStore.username = result.username\n      }\n      else{\n        UserStore.loading = false\n        UserStore.isLoggedIn = false\n        console.log(\"Login failed\")\n      }\n\n    }\n\n    catch(e){\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n      console.log(\"Kan niet connecten naar API\")\n    }\n\n  }\n\n  async doLogout(){\n\n    try{\n      //kijkt of de gebruiker ingelogt is of niet\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json()\n\n      if(result && result.succes){\n        UserStore.isLoggedIn = false\n        UserStore.username = ''\n      }\n    }\n\n    catch(e){\n      console.log(e)\n    }\n\n  }\n\n  render(){\n\n    if(userStore.loading){\n      return (\n        <div className=\"app\">\n              <div className='container'>\n                loading, please wait...\n              </div>\n        </div>\n      )\n    }\n\n    else{\n\n      if(UserStore.isLoggedIn){\n        return (\n          //Nu kan ik ze re-usen bij de submitbutton\n          <div className=\"app\">\n                <div className='container'>\n                  Welcome back {UserStore.username} to Teamup\n                  <SubmitButton\n                      text={'Log out'}\n                      disabled={false}\n                      onClick={ () => this.doLogout() }\n                  />\n                </div>\n          </div>\n        )\n      }\n\n      return (\n        <div className=\"app\">\n            <div className='container'>       \n              <LoginForm />\n            </div>\n        </div>\n      )\n\n    }\n\n  }\n}\n\n//Kijk naar veranderingen in de UserStore hier\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}